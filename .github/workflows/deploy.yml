name: Deploy Website

on:
  push:
    tags:
      - '*.*.*'  # Triggers on version tags like 1.0.0, 2.1.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: safeturned/website

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid SemVer format: $VERSION"
            exit 1
          fi
          
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "full_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine branch and environment
        id: branch
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "branch=dev" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "branch=main" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/package-lock.json

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Build and push Docker image
        run: |
          cd src
          
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH="${{ steps.branch.outputs.branch }}"
          MAJOR="${{ steps.version.outputs.major }}"
          MINOR="${{ steps.version.outputs.minor }}"
          PATCH="${{ steps.version.outputs.patch }}"
          FULL_VERSION="${{ steps.version.outputs.full_version }}"
          
          docker build --no-cache -t "ghcr.io/safeturned/website:v${VERSION}" .
          
          docker tag "ghcr.io/safeturned/website:v${VERSION}" "ghcr.io/safeturned/website:${BRANCH}-v${VERSION}"
          docker tag "ghcr.io/safeturned/website:v${VERSION}" "ghcr.io/safeturned/website:v${MAJOR}.${MINOR}"
          docker tag "ghcr.io/safeturned/website:v${VERSION}" "ghcr.io/safeturned/website:v${MAJOR}"
          
          docker push "ghcr.io/safeturned/website:v${VERSION}"
          docker push "ghcr.io/safeturned/website:${BRANCH}-v${VERSION}"
          docker push "ghcr.io/safeturned/website:v${MAJOR}.${MINOR}"
          docker push "ghcr.io/safeturned/website:v${MAJOR}"

      - name: Create deployment package
        run: |
          mkdir -p ./deploy
          
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH="${{ steps.branch.outputs.branch }}"
          ENVIRONMENT="${{ steps.branch.outputs.environment }}"
          
          cp ./src/docker-compose.yaml ./deploy/
          
          cat > ./deploy/docker-compose.override.yaml << EOF
          services:
            website:
              image: ghcr.io/safeturned/website:v${VERSION}
              container_name: ${{ steps.branch.outputs.environment == 'production' && 'safeturned-website' || 'dev-safeturned-website' }}
              environment:
                - NODE_ENV=${ENVIRONMENT}
                - APP_VERSION=${VERSION}
                - APP_BRANCH=${BRANCH}
                - IS_PRODUCTION=${{ steps.branch.outputs.environment == 'production' && 'true' || 'false' }}
              networks:
                - ${{ secrets.DOCKER_NETWORK_NAME }}
              labels:
                - "version=${VERSION}"
                - "branch=${BRANCH}"
                - "environment=${ENVIRONMENT}"
                - "major=${{ steps.version.outputs.major }}"
                - "minor=${{ steps.version.outputs.minor }}"
                - "patch=${{ steps.version.outputs.patch }}"

          networks:
            ${{ secrets.DOCKER_NETWORK_NAME }}:
              external: true
          EOF
          
          cat > ./deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          VERSION="$1"
          BRANCH="$2"
          ENVIRONMENT="$3"
          if [ -z "$VERSION" ] || [ -z "$BRANCH" ] || [ -z "$ENVIRONMENT" ]; then
              echo "Usage: $0 <version> <branch> <environment>"
              exit 1
          fi
          docker compose -f docker-compose.yaml -f docker-compose.override.yaml down || true
          docker rmi ghcr.io/safeturned/website:v${VERSION} || true
          docker rmi ghcr.io/safeturned/website:${BRANCH}-v${VERSION} || true
          docker system prune -f || true
          docker pull ghcr.io/safeturned/website:v${VERSION} || echo "Image pull failed, will build locally"
          docker compose -f docker-compose.yaml -f docker-compose.override.yaml up -d
          docker builder prune -f || true
          docker compose -f docker-compose.yaml -f docker-compose.override.yaml restart
          sleep 10
          docker compose -f docker-compose.yaml -f docker-compose.override.yaml ps
          EOF
          
          chmod +x ./deploy/deploy.sh

      - name: Copy files to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SERVER_HOST || secrets.PROD_SERVER_HOST }}
          port: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SSH_PORT || secrets.PROD_SSH_PORT }}
          username: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SERVER_USER || secrets.PROD_SERVER_USER }}
          key: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SSH_PRIVATE_KEY || secrets.PROD_SSH_PRIVATE_KEY }}
          source: "./deploy/*"
          target: ${{ steps.branch.outputs.branch == 'dev' && '/opt/dev-safeturned-website/deploy' || '/opt/safeturned-website/deploy' }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SERVER_HOST || secrets.PROD_SERVER_HOST }}
          port: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SSH_PORT || secrets.PROD_SSH_PORT }}
          username: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SERVER_USER || secrets.PROD_SERVER_USER }}
          key: ${{ steps.branch.outputs.branch == 'dev' && secrets.DEV_SSH_PRIVATE_KEY || secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            echo "=== Starting website deployment ==="
            cd ${{ steps.branch.outputs.branch == 'dev' && '/opt/dev-safeturned-website/deploy' || '/opt/safeturned-website/deploy' }}
            ls -la
            chmod +x deploy.sh
            ./deploy.sh "${{ steps.version.outputs.version }}" "${{ steps.branch.outputs.branch }}" "${{ steps.branch.outputs.environment }}"
            sleep 5
            docker compose -f docker-compose.yaml -f docker-compose.override.yaml ps
            docker compose -f docker-compose.yaml -f docker-compose.override.yaml logs --tail=20
            echo "=== Website deployment completed ==="
