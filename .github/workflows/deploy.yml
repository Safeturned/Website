name: Deploy Website

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: safeturned/website

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: src/package-lock.json

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

    - name: Build and push Docker image
      run: |
        cd src
        
        # Build the Docker image with no cache to ensure fresh build
        docker build --no-cache -t "ghcr.io/safeturned/website:latest" .
        docker tag "ghcr.io/safeturned/website:latest" "ghcr.io/safeturned/website:v${{ github.run_number }}"
        
        # Push both latest and versioned tags
        docker push "ghcr.io/safeturned/website:latest"
        docker push "ghcr.io/safeturned/website:v${{ github.run_number }}"
        
        echo "âœ… Images built and pushed successfully"

    - name: Create deployment package
      run: |
        mkdir -p ./deploy
        
        cp ./src/docker-compose.yaml ./deploy/
        
        cat > ./deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Starting website deployment..."
        
        # Stop and remove containers
        docker compose down || true
        
        # Remove old images to force fresh pull
        docker rmi ghcr.io/safeturned/website:latest || true
        
        # Clear all unused images and containers
        docker system prune -f || true
        
        echo "Pulling latest image from registry..."
        docker pull ghcr.io/safeturned/website:latest || echo "Image pull failed, will build locally"
        
        # Start the new containers with build time
        BUILD_TIME=$(date +%s) docker compose up -d
        
        # Clear Docker build cache
        docker builder prune -f || true
        
        # Force restart to ensure fresh content
        docker compose restart
        
        # Wait for container to be ready
        sleep 10
        
        # Test the website
        echo "Testing website..."
        curl -f http://localhost:3000/api/version || echo "Version endpoint not available"
        
        echo "Website deployment completed successfully!"
        EOF
        
        chmod +x ./deploy/deploy.sh

    - name: Copy files to server
      uses: appleboy/scp-action@v1
      with:
        host: ${{ secrets.SERVER_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "./deploy/deploy.sh,./deploy/docker-compose.yaml"
        target: "/opt/safeturned-website"

    - name: Deploy to server
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SERVER_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "=== Starting website deployment ==="
          
          # Go to the deploy directory where files are copied
          cd /opt/safeturned-website
          
          # Run deployment
          ./deploy.sh
          
          # Wait a moment for containers to start
          sleep 5
          
          # Check if containers are running
          docker compose ps
          
          # Show logs to verify deployment
          docker compose logs --tail=20
          
          echo "=== Website deployment completed ==="

    #- name: Create Release
    #  if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: website-v${{ github.run_number }}
    #    release_name: Website Release v${{ github.run_number }}
    #    body: |
    #      ## Website Deployment
    #      - Built from commit: ${{ github.sha }}
    #      - Image: ghcr.io/safeturned/website:v${{ github.run_number }}
    #      - Deployed to server behind Cloudflare and nginx
    #    draft: false
    #    prerelease: false
